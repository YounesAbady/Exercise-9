@page "/ListCategories"
@inject HttpClient http
@inject SweetAlertService Swal;
@inject IJSRuntime JS
@inject NavigationManager navManager
@inject ILocalStorageService localStorage

<PageTitle>Categories - YumCity</PageTitle>
<div>
    <div class="row row-cols-1 row-cols-md-3 g-2 text-center">
        @foreach (var item in _categories)
        {
            <div>
                <div class="col">
                    <div class="card h-100 text-center" style="border:groove;border-color:#66FCF1;background-color:transparent;margin-left:2px;margin-top:50px;">
                        <div class="card-body">
                            <h5 class="card-title" style="color:white">@item.Data</h5>
                            <a @onclick="() => {_category.Id = item.Id;_category.Data=item.Data;_category.IsActive=item.IsActive;}" class="btn btn-dark" style="background-color:#1F2833;color:#C5C6C7;margin-top:10px;" data-bs-toggle="modal" data-bs-target="#editCategory"><i class="bi bi-pencil-square" style="font-style:normal"> Edit</i></a>
                            <a @onclick="() => _category.Id = item.Id" class="btn btn-danger" style="color:white;margin-top:10px;" data-bs-toggle="modal" data-bs-target="#deleteCategoryModal"><i class="bi bi-trash" style="font-style:normal"> Delete</i></a>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<div class="text-center m-4">
    <button @onclick="() => _category=new()" style="background-color:#252f3e;color:white;" class="btn text-center" data-bs-toggle="modal" data-bs-target="#createCategory"><i class="bi bi-plus-circle" style="font-style:normal"> Create Category</i></button>
</div>

<!-- Create Category-->
<div class="modal fade" id="createCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel" style="color:black">New Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@_category" OnValidSubmit="@CreateCategory" class="align-content-center col-6" style="margin:auto;text-align:center;margin-top:50px;color:#1A2238">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-floating">
                        <InputText class="form-control" id="name" @bind-Value="_category.Data" />
                        <label class="form-label" style="text-align:left">Category Title</label>
                    </div>

                    <button type="submit" class="btn btn-success text-center mt-2" style="font-style:normal"> Add</button>
                    <button hidden type="button" data-bs-dismiss="modal" class="close-modal"></button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!--Delete Category-->
<div class="modal fade" id="deleteCategoryModal" tabindex="-1" aria-labelledby="deleteCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" style="text-align:center">
                Are you sure?
                <br />
                You won't be able to revert this!
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button @onclick="DeleteCategory" type="submit" class="btn btn-primary" style="margin-right:125px" data-bs-dismiss="modal">Yes, delete it!</button>
            </div>
        </div>
    </div>
</div>

<!--Update Category-->

<div class="modal fade" id="editCategory" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel" style="color:black">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@_category" OnValidSubmit="@UpdateCategory" class="align-content-center col-6" style="margin:auto;text-align:center;margin-top:50px;color:#1A2238">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-floating">
                        <InputText class="form-control" id="name" @bind-Value="_category.Data" />
                        <label class="form-label" style="text-align:left">Category Title</label>
                    </div>
                    <button type="submit" class="btn btn-success text-center mt-2" style="font-style:normal"> Edit</button>
                    <button hidden type="button" data-bs-dismiss="modal" class="close-modal"></button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private List<CategoryDto> _categories = new();
    private CategoryDto _category = new();

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Replace("\"", ""));
        try
        {
            var result = await http.GetFromJsonAsync<List<CategoryDto>>(http.BaseAddress + "list-categories");
            if (result is not null)
                _categories = result;
        }
        catch (Exception e)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Failed",
                    Text = e.Message,
                    Icon = "error",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
        }
    }

    private async Task CreateCategory()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Replace("\"", ""));
        var request = await http.PostAsJsonAsync(http.BaseAddress + "add-category", _category.Data);
        if (request.IsSuccessStatusCode)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Created successfully",
                    Icon = "success",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
            await OnInitializedAsync();
            await JS.InvokeVoidAsync("close");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Failed",
                    Text = await request.Content.ReadAsStringAsync(),
                    Icon = "error",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
        }
    }

    private async Task DeleteCategory()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Replace("\"", ""));
        var request = await http.DeleteAsync(http.BaseAddress + $"delete-category/{_category.Id}");
        if (request.IsSuccessStatusCode)
        {
            await OnInitializedAsync();
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Deleted successfully",
                    Icon = "success",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
        }
    }

    private async Task UpdateCategory()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Replace("\"", ""));
        var request = await http.PutAsJsonAsync(http.BaseAddress + $"update-category/{_category.Id}", _category.Data);
        if (request.IsSuccessStatusCode)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Edited successfully",
                    Icon = "success",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
            await OnInitializedAsync();
            await JS.InvokeVoidAsync("close");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Failed",
                    Text = await request.Content.ReadAsStringAsync(),
                    Icon = "error",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
        }
    }
    }
