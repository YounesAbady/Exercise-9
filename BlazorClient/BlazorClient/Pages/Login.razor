@page "/"
@layout LoginLayout
<PageTitle>Login - YumCity</PageTitle>
@inject HttpClient http
@inject NavigationManager navManager
@inject SweetAlertService Swal
@inject ILocalStorageService localStorage

<div style="margin-top:200px">
    <EditForm Model="@user" OnValidSubmit="@Loginn" class="align-content-center col-6 w-25" style="margin:auto;text-align:center;color:#1A2238;">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-floating form-outline mb-4">
            <InputText id="name" @bind-Value="user.Username" class="form-control" />
            <label class="form-label" for="floatingInput">Username</label>
        </div>
        <div class="form-floating form-outline mb-4">
            <InputText id="password" @bind-Value="user.Password" type="password" class="form-control" />
            <label class="form-label">Password</label>
        </div>
        <button type="submit" class="btn btn-success"><i class="bi bi-door-open-fill"> Sign in</i></button>
    </EditForm>
    <br /><br />
    <div class="text-center">
        <p style="color:#66FCF1">Not a member? <a @onclick="() => navManager.NavigateTo(_reg)" class="btn btn-outline-primary">Register</a></p>
    </div>
</div>


@code {
    UserDto user = new()
        {
            RepeatedPassword = "null"
        };
    private string _reg = "/Register";

    private async Task Loginn()
    {
        var request = await http.PostAsJsonAsync(http.BaseAddress + "login", user);
        if (request.IsSuccessStatusCode)
        {
            var token = await request.Content.ReadAsStringAsync();
            http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Replace("\"", ""));
            var req = await http.PostAsJsonAsync(http.BaseAddress + "get-id", user);
            var id = await req.Content.ReadAsStringAsync();
            await localStorage.SetItemAsync("loggedUserId", id);
            await localStorage.SetItemAsync("token", token);
            var timer = new System.Threading.Timer((e) =>
            {
                GetNewToken(id.ToString(), user);
            }, null, TimeSpan.Zero, TimeSpan.FromMinutes(2));
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Logged in successfully",
                    Icon = "success",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
            navManager.NavigateTo("/Home");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Failed",
                    Text = await request.Content.ReadAsStringAsync(),
                    Icon = "error",
                    Timer = 1500,
                    ShowConfirmButton = false
                });
        }
    }

    private async Task GetNewToken(string id, UserDto user)
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token.Replace("\"", ""));
        var req = await http.PostAsJsonAsync(http.BaseAddress + "get-rt", user);
        var rT = await req.Content.ReadAsStringAsync();
        id = id.Replace("\"", "");
        var newTokenRequest = await http.PostAsJsonAsync(http.BaseAddress + $"refresh-token/{id}", rT);
        var newToken = await newTokenRequest.Content.ReadAsStringAsync();
        await localStorage.RemoveItemAsync("token");
        await localStorage.SetItemAsync("token", newToken);
    }
}
