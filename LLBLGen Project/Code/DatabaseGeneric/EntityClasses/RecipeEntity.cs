//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using YumCity_Migrations.HelperClasses;
using YumCity_Migrations.FactoryClasses;
using YumCity_Migrations.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace YumCity_Migrations.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Recipe'.<br/><br/></summary>
	[Serializable]
	public partial class RecipeEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private EntityCollection<IngredientEntity> _ingredients;
		private EntityCollection<InstructionEntity> _instructions;
		private EntityCollection<RecipeCategoryEntity> _recipeCategories;
		private UserEntity _user;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static RecipeEntityStaticMetaData _staticMetaData = new RecipeEntityStaticMetaData();
		private static RecipeRelations _relationsFactory = new RecipeRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name User</summary>
			public static readonly string User = "User";
			/// <summary>Member name Ingredients</summary>
			public static readonly string Ingredients = "Ingredients";
			/// <summary>Member name Instructions</summary>
			public static readonly string Instructions = "Instructions";
			/// <summary>Member name RecipeCategories</summary>
			public static readonly string RecipeCategories = "RecipeCategories";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class RecipeEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public RecipeEntityStaticMetaData()
			{
				SetEntityCoreInfo("RecipeEntity", InheritanceHierarchyType.None, false, (int)YumCity_Migrations.EntityType.RecipeEntity, typeof(RecipeEntity), typeof(RecipeEntityFactory), false);
				AddNavigatorMetaData<RecipeEntity, EntityCollection<IngredientEntity>>("Ingredients", a => a._ingredients, (a, b) => a._ingredients = b, a => a.Ingredients, () => new RecipeRelations().IngredientEntityUsingRecipeId, typeof(IngredientEntity), (int)YumCity_Migrations.EntityType.IngredientEntity);
				AddNavigatorMetaData<RecipeEntity, EntityCollection<InstructionEntity>>("Instructions", a => a._instructions, (a, b) => a._instructions = b, a => a.Instructions, () => new RecipeRelations().InstructionEntityUsingRecipeId, typeof(InstructionEntity), (int)YumCity_Migrations.EntityType.InstructionEntity);
				AddNavigatorMetaData<RecipeEntity, EntityCollection<RecipeCategoryEntity>>("RecipeCategories", a => a._recipeCategories, (a, b) => a._recipeCategories = b, a => a.RecipeCategories, () => new RecipeRelations().RecipeCategoryEntityUsingRecipeId, typeof(RecipeCategoryEntity), (int)YumCity_Migrations.EntityType.RecipeCategoryEntity);
				AddNavigatorMetaData<RecipeEntity, UserEntity>("User", "Recipes", (a, b) => a._user = b, a => a._user, (a, b) => a.User = b, YumCity_Migrations.RelationClasses.StaticRecipeRelations.UserEntityUsingUserIdStatic, ()=>new RecipeRelations().UserEntityUsingUserId, null, new int[] { (int)RecipeFieldIndex.UserId }, null, true, (int)YumCity_Migrations.EntityType.UserEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static RecipeEntity()
		{
		}

		/// <summary> CTor</summary>
		public RecipeEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public RecipeEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this RecipeEntity</param>
		public RecipeEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Recipe which data should be fetched into this Recipe object</param>
		public RecipeEntity(System.Guid id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Recipe which data should be fetched into this Recipe object</param>
		/// <param name="validator">The custom validator object for this RecipeEntity</param>
		public RecipeEntity(System.Guid id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected RecipeEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Ingredient' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoIngredients() { return CreateRelationInfoForNavigator("Ingredients"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Instruction' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoInstructions() { return CreateRelationInfoForNavigator("Instructions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'RecipeCategory' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRecipeCategories() { return CreateRelationInfoForNavigator("RecipeCategories"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'User' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoUser() { return CreateRelationInfoForNavigator("User"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this RecipeEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static RecipeRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Ingredient' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathIngredients { get { return _staticMetaData.GetPrefetchPathElement("Ingredients", CommonEntityBase.CreateEntityCollection<IngredientEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Instruction' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathInstructions { get { return _staticMetaData.GetPrefetchPathElement("Instructions", CommonEntityBase.CreateEntityCollection<InstructionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'RecipeCategory' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRecipeCategories { get { return _staticMetaData.GetPrefetchPathElement("RecipeCategories", CommonEntityBase.CreateEntityCollection<RecipeCategoryEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'User' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathUser { get { return _staticMetaData.GetPrefetchPathElement("User", CommonEntityBase.CreateEntityCollection<UserEntity>()); } }

		/// <summary>The Id property of the Entity Recipe<br/><br/></summary>
		/// <remarks>Mapped on  table field: "recipe"."id".<br/>Table field type characteristics (type, precision, scale, length): Uuid, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, false</remarks>
		public virtual System.Guid Id
		{
			get { return (System.Guid)GetValue((int)RecipeFieldIndex.Id, true); }
			set	{ SetValue((int)RecipeFieldIndex.Id, value); }
		}

		/// <summary>The IsActive property of the Entity Recipe<br/><br/></summary>
		/// <remarks>Mapped on  table field: "recipe"."is_active".<br/>Table field type characteristics (type, precision, scale, length): Boolean, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Boolean IsActive
		{
			get { return (System.Boolean)GetValue((int)RecipeFieldIndex.IsActive, true); }
			set	{ SetValue((int)RecipeFieldIndex.IsActive, value); }
		}

		/// <summary>The Title property of the Entity Recipe<br/><br/></summary>
		/// <remarks>Mapped on  table field: "recipe"."title".<br/>Table field type characteristics (type, precision, scale, length): Text, 0, 0, 1073741824.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Title
		{
			get { return (System.String)GetValue((int)RecipeFieldIndex.Title, true); }
			set	{ SetValue((int)RecipeFieldIndex.Title, value); }
		}

		/// <summary>The UserId property of the Entity Recipe<br/><br/></summary>
		/// <remarks>Mapped on  table field: "recipe"."user_id".<br/>Table field type characteristics (type, precision, scale, length): Uuid, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Guid UserId
		{
			get { return (System.Guid)GetValue((int)RecipeFieldIndex.UserId, true); }
			set	{ SetValue((int)RecipeFieldIndex.UserId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'IngredientEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(IngredientEntity))]
		public virtual EntityCollection<IngredientEntity> Ingredients { get { return GetOrCreateEntityCollection<IngredientEntity, IngredientEntityFactory>("Recipe", true, false, ref _ingredients); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'InstructionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(InstructionEntity))]
		public virtual EntityCollection<InstructionEntity> Instructions { get { return GetOrCreateEntityCollection<InstructionEntity, InstructionEntityFactory>("Recipe", true, false, ref _instructions); } }

		/// <summary>Gets the EntityCollection with the related entities of type 'RecipeCategoryEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(RecipeCategoryEntity))]
		public virtual EntityCollection<RecipeCategoryEntity> RecipeCategories { get { return GetOrCreateEntityCollection<RecipeCategoryEntity, RecipeCategoryEntityFactory>("Recipe", true, false, ref _recipeCategories); } }

		/// <summary>Gets / sets related entity of type 'UserEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual UserEntity User
		{
			get { return _user; }
			set { SetSingleRelatedEntityNavigator(value, "User"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace YumCity_Migrations
{
	public enum RecipeFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>IsActive. </summary>
		IsActive,
		///<summary>Title. </summary>
		Title,
		///<summary>UserId. </summary>
		UserId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace YumCity_Migrations.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Recipe. </summary>
	public partial class RecipeRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between RecipeEntity and IngredientEntity over the 1:n relation they have, using the relation between the fields: Recipe.Id - Ingredient.RecipeId</summary>
		public virtual IEntityRelation IngredientEntityUsingRecipeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Ingredients", true, new[] { RecipeFields.Id, IngredientFields.RecipeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RecipeEntity and InstructionEntity over the 1:n relation they have, using the relation between the fields: Recipe.Id - Instruction.RecipeId</summary>
		public virtual IEntityRelation InstructionEntityUsingRecipeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Instructions", true, new[] { RecipeFields.Id, InstructionFields.RecipeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RecipeEntity and RecipeCategoryEntity over the 1:n relation they have, using the relation between the fields: Recipe.Id - RecipeCategory.RecipeId</summary>
		public virtual IEntityRelation RecipeCategoryEntityUsingRecipeId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "RecipeCategories", true, new[] { RecipeFields.Id, RecipeCategoryFields.RecipeId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between RecipeEntity and UserEntity over the m:1 relation they have, using the relation between the fields: Recipe.UserId - User.Id</summary>
		public virtual IEntityRelation UserEntityUsingUserId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "User", false, new[] { UserFields.Id, RecipeFields.UserId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticRecipeRelations
	{
		internal static readonly IEntityRelation IngredientEntityUsingRecipeIdStatic = new RecipeRelations().IngredientEntityUsingRecipeId;
		internal static readonly IEntityRelation InstructionEntityUsingRecipeIdStatic = new RecipeRelations().InstructionEntityUsingRecipeId;
		internal static readonly IEntityRelation RecipeCategoryEntityUsingRecipeIdStatic = new RecipeRelations().RecipeCategoryEntityUsingRecipeId;
		internal static readonly IEntityRelation UserEntityUsingUserIdStatic = new RecipeRelations().UserEntityUsingUserId;

		/// <summary>CTor</summary>
		static StaticRecipeRelations() { }
	}
}
